#+title: Aero Fighter

* Game Mechanics

** Spawn Schedule

Every frame, something might spawn.

| Thing     | Timing    | Per-frame Chance  |
|-----------+-----------+-------------------|
| Bomb      | Every 20s | 4/5000            |
|-----------+-----------+-------------------|
| Blob      | Every 2s  | (level * 40)/5000 |
| Tank      | Every 3s  | (level * 25)/5000 |
| Evil Ship | Every 5s  | 16/5000           |
| Building  | Every 5s  | 16/5000           |

Certain other entities have fixed spawn timings.

| Thing               | Timing            |
|---------------------+-------------------|
| Missile             | Every 1s          |
| Beam Upgrade        | Every 1000 points |
| Difficulty Increase | Every 5000 points |
| Tripwire-Cannon     | Every 5000 points |

* Coding Conventions

- Prefix: =@= denotes a smart constructor.
- Postfix: =?= denotes a boolean result from a function.
- Postfix: =!= implies that the function mutates its arguments.
- Top-level =defparameter= values are placed in the =package.lisp=.

Otherwise, we keep things simple: just structs and functions. No CLOS, other
than light use of =defgeneric=.

All dependencies are vendored.

* Credits

Aero Fighter uses [[https://github.com/bohonghuang/claw-raylib][bindings]] for [[https://github.com/raysan5/raylib/][Raylib]] for windowing, sound effects, collision,
etc. The rest of the game logic is in pure Common Lisp.

| Person       | Role           |
|--------------+----------------|
| Colin        | Code, Graphics |
| JPJ          | Concept        |
| Gumichan01   | [[https://opengameart.org/content/laser-shot][Sound Effects]]  |
| Joel Burford | [[https://joelfrancisburford.itch.io/jrpg-8-bitchiptune-sfx-pack][Sound Effects]]  |
| SketchyLogic | [[https://opengameart.org/content/nes-shooter-music-5-tracks-3-jingles][Music]]          |

* Minutia

** REPL Loading

All dependencies are vendored, so we need to help ASDF by telling it to only
look in this project folder when searching for systems:

#+begin_src lisp
(require :asdf)
(asdf:initialize-source-registry `(:source-registry (:tree ,(uiop:getcwd)) :ignore-inherited-configuration))
#+end_src

The =load.lisp= file provides this. Within Emacs, you can then define an alternate
connection scheme for Sly:

#+begin_src emacs-lisp
(setq sly-lisp-implementations
      '((sbcl-vendored ("sbcl" "--dynamic-space-size" "4GB" "--load" "load.lisp") :coding-system utf-8-unix)
        (ecl-vendored  ("ecl" "--load" "load.lisp") :coding-system utf-8-unix)))
#+end_src

Make sure to start Sly from the project root.

** Compiling Executables

*** SBCL

#+begin_example
sbcl --load build.lisp
#+end_example

*** ECL

#+begin_example
ecl --load build.lisp
#+end_example

